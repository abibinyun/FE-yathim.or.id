---
interface Props {
  programId: string;
  programTitle: string;
}

const { programId, programTitle } = Astro.props;

// Predefined donation amounts
const amounts = [50000, 100000, 200000, 500000];

// Bank accounts
const bankAccounts = [
  { id: 'bca', name: 'BCA', number: '1234567890' },
  { id: 'mandiri', name: 'Mandiri', number: '0987654321' },
  { id: 'bni', name: 'BNI', number: '1122334455' }
];
---

<div class="bg-white rounded-lg shadow-md p-6">
  <h2 class="text-2xl font-bold mb-6 text-center">Donasi untuk {programTitle}</h2>
  
  <div class="mb-8" id="step1">
    <div class="mb-4">
      <label for="name" class="block text-gray-700 mb-2">Nama (opsional)</label>
      <input 
        type="text" 
        id="name" 
        placeholder="Anonim" 
        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
      />
    </div>
    
    <div class="mb-4">
      <label class="block text-gray-700 mb-2">Jumlah Donasi</label>
      <div class="grid grid-cols-2 gap-2 mb-2">
        {amounts.map(amount => (
          <button 
            type="button" 
            class="amount-btn border rounded-lg py-2 hover:bg-gray-100" 
            data-amount={amount}
          >
            Rp {amount.toLocaleString('id-ID')}
          </button>
        ))}
      </div>
      <input 
        type="number" 
        id="amount" 
        placeholder="Jumlah lainnya" 
        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
      />
    </div>
    
    <div class="mb-4">
      <label for="bank" class="block text-gray-700 mb-2">Rekening Tujuan</label>
      <select 
        id="bank" 
        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
      >
        <option value="">Pilih Rekening</option>
        {bankAccounts.map(bank => (
          <option value={bank.id}>{bank.name} - {bank.number}</option>
        ))}
      </select>
    </div>
    
    <div class="mb-6">
      <label for="message" class="block text-gray-700 mb-2">Pesan (opsional)</label>
      <textarea 
        id="message" 
        rows="3" 
        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
        placeholder="Tulis pesan atau doa Anda di sini"
      ></textarea>
    </div>
    
    <button 
      id="nextBtn" 
      class="w-full bg-primary text-white py-3 rounded-lg hover:bg-primary-dark transition-colors"
    >
      Lanjutkan
    </button>
  </div>
  
  <div class="hidden" id="step2">
    <div class="mb-4 p-4 bg-gray-50 rounded-lg">
      <h3 class="font-medium mb-2">Ringkasan Donasi</h3>
      <div class="grid grid-cols-2 gap-2 text-sm">
        <span class="text-gray-600">Program:</span>
        <span id="summary-program">{programTitle}</span>
        
        <span class="text-gray-600">Nama:</span>
        <span id="summary-name">Anonim</span>
        
        <span class="text-gray-600">Jumlah:</span>
        <span id="summary-amount">Rp 0</span>
        
        <span class="text-gray-600">Rekening:</span>
        <span id="summary-bank">-</span>
      </div>
    </div>
    
    <div class="mb-6">
      <label class="block text-gray-700 mb-2">Bukti Transfer</label>
      <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
        <input type="file" id="proof" class="hidden" accept="image/*" />
        <label for="proof" class="cursor-pointer">
          <div class="flex flex-col items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <span class="text-gray-600">Klik untuk upload bukti transfer</span>
          </div>
        </label>
        <div id="preview" class="mt-2 hidden">
          <img id="image-preview" class="max-h-40 mx-auto" />
        </div>
      </div>
    </div>
    
    <div class="flex gap-3">
      <button 
        id="backBtn" 
        class="flex-1 border border-gray-300 py-3 rounded-lg hover:bg-gray-50 transition-colors"
      >
        Kembali
      </button>
      <button 
        id="submitBtn" 
        class="flex-1 bg-primary text-white py-3 rounded-lg hover:bg-primary-dark transition-colors"
      >
        Kirim Donasi
      </button>
    </div>
  </div>
  
  <div class="hidden text-center py-8" id="success">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-green-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <h3 class="text-2xl font-bold mb-2">Terima Kasih!</h3>
    <p class="text-gray-600 mb-6">Donasi Anda telah kami terima. Semoga kebaikan Anda dibalas berlipat ganda.</p>
    <a href="/donasi" class="text-primary hover:underline">Kembali ke halaman donasi</a>
  </div>
</div>

<script>
  // Form navigation
  const step1 = document.getElementById('step1');
  const step2 = document.getElementById('step2');
  const success = document.getElementById('success');
  const nextBtn = document.getElementById('nextBtn');
  const backBtn = document.getElementById('backBtn');
  const submitBtn = document.getElementById('submitBtn');
  
  // Form fields
  const nameInput = document.getElementById('name');
  const amountInput = document.getElementById('amount');
  const bankSelect = document.getElementById('bank');
  const messageInput = document.getElementById('message');
  const proofInput = document.getElementById('proof');
  
  // Summary elements
  const summaryName = document.getElementById('summary-name');
  const summaryAmount = document.getElementById('summary-amount');
  const summaryBank = document.getElementById('summary-bank');
  
  // Amount buttons
  const amountBtns = document.querySelectorAll('.amount-btn');
  amountBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const amount = btn.getAttribute('data-amount');
      if (amountInput) {
        amountInput.value = amount;
      }
      
      // Update active state
      amountBtns.forEach(b => b.classList.remove('bg-primary', 'text-white'));
      btn.classList.add('bg-primary', 'text-white');
    });
  });
  
  // Preview image upload
  if (proofInput) {
    proofInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.getElementById('preview');
          const imagePreview = document.getElementById('image-preview');
          if (preview && imagePreview) {
            preview.classList.remove('hidden');
            imagePreview.src = e.target.result;
          }
        }
        reader.readAsDataURL(file);
      }
    });
  }
  
  // Next button
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      // Update summary
      if (summaryName && nameInput) {
        summaryName.textContent = nameInput.value || 'Anonim';
      }
      
      if (summaryAmount && amountInput) {
        const amount = parseInt(amountInput.value) || 0;
        summaryAmount.textContent = `Rp ${amount.toLocaleString('id-ID')}`;
      }
      
      if (summaryBank && bankSelect) {
        const selectedOption = bankSelect.options[bankSelect.selectedIndex];
        summaryBank.textContent = selectedOption.text || '-';
      }
      
      // Show step 2
      if (step1 && step2) {
        step1.classList.add('hidden');
        step2.classList.remove('hidden');
      }
    });
  }
  
  // Back button
  if (backBtn) {
    backBtn.addEventListener('click', () => {
      if (step1 && step2) {
        step2.classList.add('hidden');
        step1.classList.remove('hidden');
      }
    });
  }
  
  // Submit button
  if (submitBtn) {
    submitBtn.addEventListener('click', () => {
      // Here you would normally send the data to your backend
      
      // Show success message
      if (step2 && success) {
        step2.classList.add('hidden');
        success.classList.remove('hidden');
      }
    });
  }
</script>